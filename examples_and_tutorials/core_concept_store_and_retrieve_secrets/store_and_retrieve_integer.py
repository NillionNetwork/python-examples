import asyncio
import os
import pytest

from nillion_client import (
    Network,
    NilChainPayer,
    NilChainPrivateKey,
    Permissions,
    SecretInteger,
    VmClient,
    PrivateKey,
)
from dotenv import load_dotenv

home = os.getenv("HOME")
load_dotenv(f"{home}/.config/nillion/nillion-devnet.env")


# Store and retrieve a SecretInteger using the Python Client
async def main():
    # Use the devnet configuration generated by `nillion-devnet`
    network = Network.from_config("devnet")

    # Create payments config and set up Nillion wallet with a private key to pay for operations
    nilchain_key: str = os.getenv("NILLION_NILCHAIN_PRIVATE_KEY_0")  # type: ignore
    payer = NilChainPayer(
        network,
        wallet_private_key=NilChainPrivateKey(bytes.fromhex(nilchain_key)),
        gas_limit=10000000,
    )
    signing_key = PrivateKey()
    client = await VmClient.create(signing_key, network, payer)

    ##### STORE SECRET
    print("-----STORE SECRET")

    # Create a SecretInteger
    secret_name = "my_int1"
    secret_value = 100
    values = {
        secret_name: SecretInteger(secret_value),
    }

    # Create a permissions object to attach to the stored secret
    permissions = Permissions.defaults_for_user(client.user_id)

    # Store the secret
    values_id = await client.store_values(
        values=values, ttl_days=5, permissions=permissions
    ).invoke()

    print(f"The secret is stored at store_id: {values_id}")

    ##### RETRIEVE SECRET
    print("-----RETRIEVE SECRET")

    retrieved_values = await client.retrieve_values(values_id).invoke()
    value: SecretInteger = retrieved_values[secret_name]  # type: ignore

    print(f"The secret value is {value.value}")
    return value.value


if __name__ == "__main__":
    asyncio.run(main())


@pytest.mark.asyncio
async def test_main():
    result = await main()
    assert result == 100
