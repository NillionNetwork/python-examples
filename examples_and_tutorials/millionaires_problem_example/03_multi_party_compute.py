import argparse
import asyncio
import os
from nillion_client.ids import UUID
import pytest
import importlib

from nillion_client import (
    InputPartyBinding,
    Network,
    NilChainPayer,
    NilChainPrivateKey,
    OutputPartyBinding,
    SecretInteger,
    UserId,
    VmClient,
    PrivateKey,
)
from dotenv import load_dotenv

from config import CONFIG_PARTY_1, CONFIG_N_PARTIES

home = os.getenv("HOME")
load_dotenv(f"{home}/.config/nillion/nillion-devnet.env")


async def main(args=None):
    parser = argparse.ArgumentParser(
        description="Create a secret on the Nillion network with set read/retrieve permissions"
    )

    parser.add_argument(
        "--program_id",
        required=True,
        type=str,
        help="Program ID of the millionaires program",
    )

    parser.add_argument(
        "--user_ids_to_values_ids",
        required=True,
        nargs="+",
        type=str,
        help="List of userid:valuesid pairs of the secrets, with each pair separated by a space",
    )

    args = parser.parse_args(args)

    # Use the devnet configuration generated by `nillion-devnet`
    network = Network.from_config("devnet")

    # Create payments config and set up Nillion wallet with a private key to pay for operations
    nilchain_key: str = os.getenv("NILLION_NILCHAIN_PRIVATE_KEY_0")  # type: ignore
    payer = NilChainPayer(
        network,
        wallet_private_key=NilChainPrivateKey(bytes.fromhex(nilchain_key)),
        gas_limit=10000000,
    )

    signing_key = PrivateKey(CONFIG_PARTY_1["private_key"])
    client = await VmClient.create(signing_key, network, payer)

    # Add Alice as an input party
    input_bindings = [InputPartyBinding(CONFIG_PARTY_1["party_name"], client.user_id)]

    # Add an output party (Alice).
    # The output party reads the result of the blind computation
    output_bindings = [
        OutputPartyBinding(CONFIG_PARTY_1["party_name"], [client.user_id])
    ]

    print(f"Computing using program {args.program_id}")

    # Also add Bob and Charlie as input parties
    values_ids = []
    for i, pair in enumerate(args.user_ids_to_values_ids):
        user_id, values_id = pair.split(":")
        party_name = CONFIG_N_PARTIES[i]["party_name"]
        input_bindings.append(InputPartyBinding(party_name, UserId.parse(user_id)))
        values_ids.append(UUID(values_id))

    # Add any computation time secrets
    # Alice provides her salary at compute time
    party_name_alice = CONFIG_PARTY_1["party_name"]
    secret_name_alice = CONFIG_PARTY_1["secret_name"]
    secret_value_alice = CONFIG_PARTY_1["secret_value"]
    compute_time_values = {secret_name_alice: SecretInteger(secret_value_alice)}

    print(
        f"\nüéâ {party_name_alice} provided {secret_name_alice}: {secret_value_alice} as a compute time secret"
    )

    # Compute on the secret with all store ids. Note that there are no compute time secrets or public variables
    compute_id = await client.compute(
        args.program_id,
        input_bindings,
        output_bindings,
        values=compute_time_values,
        value_ids=values_ids,
    ).invoke()

    # Print compute result
    print(f"The computation was initiated in the network. compute_id: {compute_id}")
    result = await client.retrieve_compute_results(compute_id).invoke()
    print(f"üñ•Ô∏è  The output result is {result}")
    print(f"üñ•Ô∏è  The result is {result}")
    balance = await client.balance()
    print(f"üí∞  Final client balance: {balance.balance} Credits")
    client.close()

    # The compute result is an index
    # Map it to the corresponding party name who should pay for lunch
    # ['Alice', 'Bob', 'Charlie']
    my_parties = CONFIG_N_PARTIES
    my_parties.insert(0, CONFIG_PARTY_1)
    richest_party = my_parties[result["largest_position"].value]["party_name"]
    print(f"The richest friend is {richest_party}")
    return richest_party


if __name__ == "__main__":
    asyncio.run(main())


@pytest.mark.asyncio
async def test_main():
    store_secret_party_1 = importlib.import_module("01_store_program")
    store_secret_party_n = importlib.import_module("02_store_secret_party_n")
    result = await store_secret_party_1.main()
    args = ["--user_id_1", str(result[0]), "--program_id", str(result[1])]
    result = await store_secret_party_n.main(args)
    values_ids = result[1].split(" ", 1)
    args = [
        "--program_id",
        result[0],
        "--user_ids_to_values_ids",
        values_ids[0],
        values_ids[1],
    ]
    result = await main(args)
    assert result == "Charlie"
