import hashlib
import argparse
import asyncio
import os
import sys
from nillion_client.ids import UUID
import pytest

from nillion_client import (
    Network,
    NilChainPayer,
    NilChainPrivateKey,
    VmClient,
    PrivateKey,
)
from dotenv import load_dotenv

home = os.getenv("HOME")
load_dotenv(f"{home}/.config/nillion/nillion-devnet.env")


async def main(args=None):
    parser = argparse.ArgumentParser(
        description="Use read permissions to retrieve a secret owned by another user on the Nillion network"
    )
    parser.add_argument(
        "--values_id",
        required=True,
        type=str,
        help="Values ID from the writer client store operation",
    )

    args = parser.parse_args(args)

    # Use the devnet configuration generated by `nillion-devnet`
    network = Network.from_config("devnet")

    # Create payments config and set up Nillion wallet with a private key to pay for operations
    nilchain_key: str = os.getenv("NILLION_NILCHAIN_PRIVATE_KEY_0")  # type: ignore
    payer = NilChainPayer(
        network,
        wallet_private_key=NilChainPrivateKey(bytes.fromhex(nilchain_key)),
        gas_limit=10000000,
    )

    # We will identify ourselves with the pre-configured private key
    signing_key = PrivateKey(hashlib.sha256(b"seed_1").digest())
    client = await VmClient.create(signing_key, network, payer)
    reader_user_id = client.user_id
    values_id = UUID(args.values_id)

    # Adding funds to the client balance so the upcoming operations can be paid for
    funds_amount = 1000
    print(f"ðŸ’°  Adding some funds to the client doing the retrieval balance: {funds_amount}")
    await client.add_funds(funds_amount)

    # Reader retrieves the named secret by store id
    print(f"Retrieving secret as reader: {reader_user_id}")
    values = await client.retrieve_values(values_id).invoke()

    print(
        f"ðŸ¦„ Retrieved {values_id} secret, values = {values}",
        file=sys.stderr,
    )
    print(
        "\n\nRun the following command to revoke the reader's retrieve permissions to the secret"
    )
    print(
        f"\nðŸ“‹ python3 04_revoke_read_permissions.py --values_id {args.values_id} --revoked_user_id {reader_user_id}"
    )
    return [values_id, reader_user_id]


if __name__ == "__main__":
    asyncio.run(main())


@pytest.mark.asyncio
async def test_main():
    pass
