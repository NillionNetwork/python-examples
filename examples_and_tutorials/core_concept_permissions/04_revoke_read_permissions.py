import hashlib
import argparse
import asyncio
import os
import sys
from nillion_client.ids import UUID
import pytest

from nillion_client import (
    Network,
    NilChainPayer,
    NilChainPrivateKey,
    Permissions,
    UserId,
    VmClient,
    PrivateKey,
)
from dotenv import load_dotenv


home = os.getenv("HOME")
load_dotenv(f"{home}/.config/nillion/nillion-devnet.env")


async def main(args=None):
    parser = argparse.ArgumentParser(
        description="Revoke user read/retrieve permissions from a secret on the Nillion network"
    )
    parser.add_argument(
        "--values_id",
        required=True,
        type=str,
        help="Values ID from the writer client store operation",
    )
    parser.add_argument(
        "--revoked_user_id",
        required=True,
        type=str,
        help="User ID of the reader python client (derived from private key)",
    )
    args = parser.parse_args(args)

    # Use the devnet configuration generated by `nillion-devnet`
    network = Network.from_config("devnet")

    # Create payments config and set up Nillion wallet with a private key to pay for operations
    nilchain_key: str = os.getenv("NILLION_NILCHAIN_PRIVATE_KEY_0")  # type: ignore
    payer = NilChainPayer(
        network,
        wallet_private_key=NilChainPrivateKey(bytes.fromhex(nilchain_key)),
        gas_limit=10000000,
    )

    # We will identify ourselves with the pre-configured private key
    signing_key = PrivateKey(hashlib.sha256(b"seed_2").digest())
    client = await VmClient.create(signing_key, network, payer)
    values_id = UUID(args.values_id)

    current_permissions = await client.retrieve_permissions(values_id).invoke()

    revoked_user_id = UserId.parse(args.revoked_user_id)
    reader_permissions_before = revoked_user_id in current_permissions.retrieve
    if not reader_permissions_before:
        raise Exception("Reader should still have permissions to retrieve")

    # Create new permissions object to rewrite permissions (reader no longer has retrieve permission)
    new_permissions = Permissions.defaults_for_user(client.user_id)

    # Update the permission
    print(f"‚ÑπÔ∏è Updating permissions for secret: {values_id}.")
    print(
        f"‚ÑπÔ∏è Reset permissions so that user id {revoked_user_id} is not allowed to retrieve object.",
        file=sys.stderr,
    )
    await client.overwrite_permissions(values_id, new_permissions).invoke()

    # Retrieve current permissions for secret
    current_permissions = await client.retrieve_permissions(values_id).invoke()

    reader_permissions_after = revoked_user_id in current_permissions.retrieve
    if reader_permissions_after:
        raise Exception(
            "Reader should no longer have permissions to retrieve the secret"
        )

    print(
        "\n\nRun the following command to test that permissions have been properly revoked"
    )
    print(f"\nüìã  python3 05_test_revoked_permissions.py  --values_id {values_id}")
    return args.values_id


if __name__ == "__main__":
    asyncio.run(main())


@pytest.mark.asyncio
async def test_main():
    pass
